// Copyright 2023 Hewlett Packard Enterprise Development LP

@Library('dst-shared@master') _

pipeline {
    agent {
        node { label "$JP_POOL" }
    }

    environment {
        SLACK_TOKEN = credentials('dst-slack-bot-token')
        JiraUserPass = credentials('gsptool_secret_text')
        // Needed by signArtifacts for correct location of buildlog.logs in Artifactory:
        PRODUCT = "neo"
        BRANCH_NAME = "release"
        TARGET_OS = "hpc-lus-filesystem"
        TARGET_ARCH = "noarch"
    }

    options {
        // Don't fill up the build server with unnecessary cruft
        buildDiscarder(logRotator(numToKeepStr: '20'))
    }

    stages {
        stage('Build RPMs') {
            steps {
                sh "umask 022"
                sh "/bin/bash -x contrib/jenkins/build-source-RPM.sh"
            }
        }

        stage('Scan/Sign RPMs') {
            steps {
               script {
                   if (env.JP_SIGN_RPMS == "true") {
                       signArtifacts([artifacts: 'rpmbuild/'])
                   } else {
                       println "Skip code-signing for non-release RPMs"
                   }
               }
            }
        }

        stage('Store Zip') {
            steps {
                sh "umask 022"
                sh "contrib/jenkins/zip-source-RPM.sh"
            }
        }
    }
    post {
        success {
            script {
                if ( checkFileExists(filePath: 'lustre*.zip') ) {
                    archiveArtifacts artifacts: 'lustre*.zip', fingerprint: false
                } else {
                    println "lustre source zip not found"
                }
            }
        }
        failure {
            script {
                sh "dst-slack send --token \"$SLACK_TOKEN\" --channel cs-neo-builds  \
                    --message \"${JOB_NAME} #${BUILD_NUMBER}: Build failure\" --type error"
            }
        }
        changed {
            script {
                if (currentBuild.currentResult == 'SUCCESS') {
                    sh "dst-slack send --token \"$SLACK_TOKEN\" --channel cs-neo-builds \
                        --message \"${JOB_NAME} #${BUILD_NUMBER}: Back to normal\" --type success"
                }
            }
        }
    }
}
